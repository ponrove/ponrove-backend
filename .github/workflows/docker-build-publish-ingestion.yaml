name: Docker Build Ingestion API module
on:
  push:
    branches:
      - main
  release:
    types: [published]

env:
  REGISTRY_IMAGE: rg.fr-par.scw.cloud/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/386
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
          - linux/arm/v8
          - linux/ppc64le

    steps:
      - uses: actions/checkout@v4
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          annotations: |
            org.opencontainers.image.created=${{ github.event.release.published_at || github.event.head_commit.timestamp }}
            org.opencontainers.image.authors="Ponrove Team <https://ponrove.com/contact>"
            org.opencontainers.image.url="https://rg.fr-par.scw.cloud/${{ github.repository_owner }}/${{ github.event.repository.name }}"
            org.opencontainers.image.source="https://github.com/ponrove/${{ github.event.repository.name }}"
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor="Ponrove"
            org.opencontainers.image.licenses="APGL-3.0"
            org.opencontainers.image.description="Ponrove Backend Ingestion API module for ${matrix.platform}"
            org.opencontainers.image.title="Ponrove Backend Ingestion API module"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: rg.fr-par.scw.cloud/ponrove
          username: ${{ secrets.SCW_ACCESS_KEY_ID }}
          password: ${{ secrets.SCW_SECRET_KEY }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./build/docker/Dockerfile.ingestion
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ env.REGISTRY_IMAGE }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: rg.fr-par.scw.cloud/ponrove
          username: ${{ secrets.SCW_ACCESS_KEY_ID }}
          password: ${{ secrets.SCW_SECRET_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: |
            suffix=-ingestion
          tags: |
            type=edge,branch=main
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
