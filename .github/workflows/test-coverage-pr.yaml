name: Go Test Coverage Report On Pull Request
on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2
      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        with:
          go-version-file: go.mod
      - name: Install dependencies
        run: go mod vendor

      - name: Build Server
        id: build-server
        run: go build -v -a -installsuffix cgo -o runtime_binary ./cmd/server
      - name: Build Ingestion API
        id: build-ingestion
        run: go build -v -a -installsuffix cgo -o runtime_binary ./cmd/ingestion
      - name: Build Hub API
        id: build-hub
        run: go build -v -a -installsuffix cgo -o runtime_binary ./cmd/hub

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@3f1544eb9eff0b4d4d279b33f704a06fcf8d0e43

      - name: Set up Docker Compose
        id: setup-compose
        uses: docker/setup-compose-action@8d504d704c1efdb471247e2126b8d3672c944f8c

      - name: Run tests
        run: |
          docker compose -f docker-compose-test.yaml --profile integration --profile unit up --abort-on-container-exit --force-recreate --always-recreate-deps

      - name: Upload integration coverage report
        if: always()
        id: coverage-integration
        env:
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
          CODACY_ORGANIZATION_PROVIDER: gh
          CODACY_USERNAME: ${{ github.repository_owner }}
          CODACY_PROJECT_NAME: ${{ github.event.repository.name }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report \
              --partial --force-coverage-parser go -r integration.coverage.out
      - name: Upload unit coverage report
        if: always()
        id: coverage-unit
        env:
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
          CODACY_ORGANIZATION_PROVIDER: gh
          CODACY_USERNAME: ${{ github.repository_owner }}
          CODACY_PROJECT_NAME: ${{ github.event.repository.name }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report \
              --partial --force-coverage-parser go -r unit.coverage.out

      - name: Finish coverage report
        if: always()
        id: coverage-final
        env:
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
          CODACY_ORGANIZATION_PROVIDER: gh
          CODACY_USERNAME: ${{ github.repository_owner }}
          CODACY_PROJECT_NAME: ${{ github.event.repository.name }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) final

      - name: report
        uses: actions/github-script@5ee2b97722aeebb4c5d5c867345a6745cd868065
        if: always()
        env:
          BUILD_RESULT: ${{ steps.build.outputs.stdout }}
          TEST_RESULT: ${{ steps.test.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Golang Build & Test status')
            })

            // 2. Prepare format of the comment
            const output = `## Golang Build & Test status ðŸš€

            #### Go Build Backend API Outcome ðŸ”¨\`${{ steps.build-server.outcome }}\`

            #### Go Build Ingestion API Outcome ðŸ”¨\`${{ steps.build-ingestion.outcome }}\`

            #### Go Build Hub API Outcome ðŸ”¨\`${{ steps.build-hub.outcome }}\`

            #### Go Test Outcome ðŸ§ª\`${{ steps.test.outcome }}\`

            #### Coverage Report ðŸ“Š\`${{ steps.coverage.outcome }}\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
