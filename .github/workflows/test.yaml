name: Go
on:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.x"
      - name: Install dependencies
        run: go mod vendor
      - name: Build
        id: build
        run: go build -v -a -installsuffix cgo -o runtime_binary ./cmd/server
        continue-on-error: true
      - name: Test with the Go CLI
        id: test
        run: go test ./...
        continue-on-error: true
      - name: report
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          BUILD_RESULT: ${{ steps.build.outputs.stdout }}
          TEST_RESULT: ${{ steps.test.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `## CI Status ðŸš€
            #### Go Build Outcome ðŸ”¨\`${{ steps.build.outcome }}\`
            <details><summary>Build result</summary>

            \`\`\`\n
            ${process.env.BUILD_RESULT}
            \`\`\`

            </details>

            #### Go Test Outcome ðŸ§ª\`${{ steps.test.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.TEST_RESULT}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
